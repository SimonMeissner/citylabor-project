install.packages(c("shiny", "shinythemes"))
shiny::runApp()
shiny::runApp()
runApp()
runApp()
q()
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
q
q()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?sliderInput
?dateRangeInput
runApp()
runApp()
plant_data <- read.csv("test_data.csv", header=TRUE)
plant_data <- read.csv("test/test_data.csv", header=TRUE)
runApp()
View(plant_data)
?selectInput
runApp()
?dataTableOutput
?submitButton
runApp()
View(plant_data)
View(plant_data)
View(plant_data)
View(plant_data)
runApp()
shiny::runApp()
?OutputTable
?dataTableOutput
View(plant_data)
View(plant_data)
runApp()
?renderDataTable
runApp()
?radioButtons
runApp()
shiny::runApp()
runApp()
?updateNavbarPage
runApp()
runApp()
?actionButton
runApp()
runApp()
shiny::runApp()
runApp()
View(plant_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.csv("test/test_data.csv", header=TRUE)
plant_data <- read.csv("test/test_data.csv", header=TRUE)
plant_data[plant_data$plant_name == "aubergine"]
plant_data[plant_data$plant_name == aubergine]
plant_data
print(plant_data$plant_name == aubergine)
print(plant_data$plant_name == corn)
print(plant_data$plant_name == "corn")
plant_data[plant_data$plant_name == "aubergine"]
plant_data$plant_name == "aubergine"
subset(plant_data, plant_name == "aubergine")
runApp()
class(subset(plant_data, plant_name == "aubergine"))
runApp()
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
runApp()
runApp()
runApp()
